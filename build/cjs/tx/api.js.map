{"version":3,"sources":["../../../lib/tx/api.ts"],"names":["transactionStatus","sdk","args","http","post","getIssuerOrigin","withCredentials","resumeTransaction","stateToken","tx","exists","_get","STATE_TOKEN_KEY_NAME","Promise","reject","AuthSdkError","status","then","res","AuthTransaction","introspect","transactionStep","transactionExists","postToTransaction","url","options"],"mappings":";;;;;;;;;;AAcA;;AACA;;AACA;;AACA;;AACA;;AAlBA;;;;;;;;;;;;;AAaA;AAOA,SAASA,iBAAT,CAA2BC,GAA3B,EAAgCC,IAAhC,EAAsC;AACpCA,EAAAA,IAAI,GAAG,yBAAcD,GAAd,EAAmBC,IAAnB,CAAP;AACA,SAAOC,cAAKC,IAAL,CAAUH,GAAV,EAAeA,GAAG,CAACI,eAAJ,KAAwB,eAAvC,EAAwDH,IAAxD,EAA8D;AAAEI,IAAAA,eAAe,EAAE;AAAnB,GAA9D,CAAP;AACD;;AAED,SAASC,iBAAT,CAA2BN,GAA3B,EAAgCC,IAAhC,EAAsC;AACpC,MAAI,CAACA,IAAD,IAAS,CAACA,IAAI,CAACM,UAAnB,EAA+B;AAC7B,QAAIA,UAAU,GAAGP,GAAG,CAACQ,EAAJ,CAAOC,MAAP,CAAcC,IAAd,CAAmBC,+BAAnB,CAAjB;;AACA,QAAIJ,UAAJ,EAAgB;AACdN,MAAAA,IAAI,GAAG;AACLM,QAAAA,UAAU,EAAEA;AADP,OAAP;AAGD,KAJD,MAIO;AACL,aAAOK,OAAO,CAACC,MAAR,CAAe,IAAIC,qBAAJ,CAAiB,0BAAjB,CAAf,CAAP;AACD;AACF;;AACD,SAAOd,GAAG,CAACQ,EAAJ,CAAOO,MAAP,CAAcd,IAAd,EACJe,IADI,CACC,UAASC,GAAT,EAAc;AAClB,WAAO,IAAIC,gCAAJ,CAAoBlB,GAApB,EAAyBiB,GAAzB,CAAP;AACD,GAHI,CAAP;AAID;;AAED,SAASE,UAAT,CAAqBnB,GAArB,EAA0BC,IAA1B,EAAgC;AAC9B,MAAI,CAACA,IAAD,IAAS,CAACA,IAAI,CAACM,UAAnB,EAA+B;AAC7B,QAAIA,UAAU,GAAGP,GAAG,CAACQ,EAAJ,CAAOC,MAAP,CAAcC,IAAd,CAAmBC,+BAAnB,CAAjB;;AACA,QAAIJ,UAAJ,EAAgB;AACdN,MAAAA,IAAI,GAAG;AACLM,QAAAA,UAAU,EAAEA;AADP,OAAP;AAGD,KAJD,MAIO;AACL,aAAOK,OAAO,CAACC,MAAR,CAAe,IAAIC,qBAAJ,CAAiB,4BAAjB,CAAf,CAAP;AACD;AACF;;AACD,SAAOM,eAAe,CAACpB,GAAD,EAAMC,IAAN,CAAf,CACJe,IADI,CACC,UAAUC,GAAV,EAAe;AACnB,WAAO,IAAIC,gCAAJ,CAAoBlB,GAApB,EAAyBiB,GAAzB,CAAP;AACD,GAHI,CAAP;AAID;;AAED,SAASG,eAAT,CAAyBpB,GAAzB,EAA8BC,IAA9B,EAAoC;AAClCA,EAAAA,IAAI,GAAG,yBAAcD,GAAd,EAAmBC,IAAnB,CAAP,CADkC,CAElC;;AACA,SAAOC,cAAKC,IAAL,CAAUH,GAAV,EAAeA,GAAG,CAACI,eAAJ,KAAwB,0BAAvC,EAAmEH,IAAnE,EAAyE;AAAEI,IAAAA,eAAe,EAAE;AAAnB,GAAzE,CAAP;AACD;;AAED,SAASgB,iBAAT,CAA2BrB,GAA3B,EAAgC;AAC9B;AACA,SAAO,CAAC,CAACA,GAAG,CAACQ,EAAJ,CAAOC,MAAP,CAAcC,IAAd,CAAmBC,+BAAnB,CAAT;AACD;;AAED,SAASW,iBAAT,CAA2BtB,GAA3B,EAAgCuB,GAAhC,EAAqCtB,IAArC,EAA2CuB,OAA3C,EAAqD;AACnD,SAAOtB,cAAKC,IAAL,CAAUH,GAAV,EAAeuB,GAAf,EAAoBtB,IAApB,EAA0BuB,OAA1B,EACJR,IADI,CACC,UAASC,GAAT,EAAc;AAClB,WAAO,IAAIC,gCAAJ,CAAoBlB,GAApB,EAAyBiB,GAAzB,CAAP;AACD,GAHI,CAAP;AAID","sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\n/* eslint-disable complexity, max-statements */\nimport http from '../http';\nimport AuthSdkError from '../errors/AuthSdkError';\nimport { STATE_TOKEN_KEY_NAME } from '../constants';\nimport { addStateToken } from './util';\nimport { AuthTransaction } from './AuthTransaction';\n\nfunction transactionStatus(sdk, args) {\n  args = addStateToken(sdk, args);\n  return http.post(sdk, sdk.getIssuerOrigin() + '/api/v1/authn', args, { withCredentials: true });\n}\n\nfunction resumeTransaction(sdk, args) {\n  if (!args || !args.stateToken) {\n    var stateToken = sdk.tx.exists._get(STATE_TOKEN_KEY_NAME);\n    if (stateToken) {\n      args = {\n        stateToken: stateToken\n      };\n    } else {\n      return Promise.reject(new AuthSdkError('No transaction to resume'));\n    }\n  }\n  return sdk.tx.status(args)\n    .then(function(res) {\n      return new AuthTransaction(sdk, res);\n    });\n}\n\nfunction introspect (sdk, args) {\n  if (!args || !args.stateToken) {\n    var stateToken = sdk.tx.exists._get(STATE_TOKEN_KEY_NAME);\n    if (stateToken) {\n      args = {\n        stateToken: stateToken\n      };\n    } else {\n      return Promise.reject(new AuthSdkError('No transaction to evaluate'));\n    }\n  }\n  return transactionStep(sdk, args)\n    .then(function (res) {\n      return new AuthTransaction(sdk, res);\n    });\n}\n\nfunction transactionStep(sdk, args) {\n  args = addStateToken(sdk, args);\n  // v1 pipeline introspect API\n  return http.post(sdk, sdk.getIssuerOrigin() + '/api/v1/authn/introspect', args, { withCredentials: true });\n}\n\nfunction transactionExists(sdk) {\n  // We have a cookie state token\n  return !!sdk.tx.exists._get(STATE_TOKEN_KEY_NAME);\n}\n\nfunction postToTransaction(sdk, url, args, options?) {\n  return http.post(sdk, url, args, options)\n    .then(function(res) {\n      return new AuthTransaction(sdk, res);\n    });\n}\n\nexport {\n  transactionStatus,\n  resumeTransaction,\n  transactionExists,\n  postToTransaction,\n  introspect,\n};\n"],"file":"api.js"}