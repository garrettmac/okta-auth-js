{"version":3,"sources":["../../lib/StorageManager.ts"],"names":["StorageManager","constructor","storageManagerOptions","cookieOptions","storageUtil","getOptionsForSection","sectionName","overrideOptions","Object","assign","getStorage","options","storageProvider","storageType","storageTypes","sessionCookie","idx","indexOf","slice","findStorageType","getStorageByType","getTransactionStorage","storage","storageKey","TRANSACTION_STORAGE_NAME","SavedObject","getTokenStorage","TOKEN_STORAGE_NAME","getHttpCache","CACHE_STORAGE_NAME","getLegacyPKCEStorage","PKCE_STORAGE_NAME","getLegacyOAuthParamsStorage","REDIRECT_OAUTH_PARAMS_NAME"],"mappings":"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","sourcesContent":["\nimport {\n  PKCE_STORAGE_NAME,\n  TOKEN_STORAGE_NAME,\n  TRANSACTION_STORAGE_NAME,\n  CACHE_STORAGE_NAME,\n  REDIRECT_OAUTH_PARAMS_NAME\n} from './constants';\nimport {\n  StorageUtil,\n  StorageProvider,\n  StorageOptions,\n  PKCEStorage,\n  CookieOptions,\n  TransactionStorage,\n  StorageManagerOptions,\n  SimpleStorage\n} from './types';\nimport SavedObject from './SavedObject';\n\nexport default class StorageManager {\n  storageManagerOptions: StorageManagerOptions;\n  cookieOptions: CookieOptions;\n  storageUtil: StorageUtil;\n\n  constructor(storageManagerOptions: StorageManagerOptions, cookieOptions: CookieOptions, storageUtil: StorageUtil) {\n    this.storageManagerOptions = storageManagerOptions;\n    this.cookieOptions = cookieOptions;\n    this.storageUtil = storageUtil;\n  }\n\n  // combines defaults in order\n  getOptionsForSection(sectionName: string, overrideOptions?: StorageOptions) {\n    return Object.assign({}, this.storageManagerOptions[sectionName], overrideOptions);\n  }\n \n  // generic method to get any available storage provider\n  getStorage(options: StorageOptions): SimpleStorage {\n    options = Object.assign({}, this.cookieOptions, options); // set defaults\n\n    if (options.storageProvider) {\n      return options.storageProvider;\n    }\n\n    let { storageType, storageTypes } = options;\n\n    if(storageType === 'sessionStorage') {\n      options.sessionCookie = true;\n    }\n\n    // Maintain compatibility. Automatically fallback. May change in next major version. OKTA-362589\n    if (storageType && storageTypes) {\n      const idx = storageTypes.indexOf(storageType);\n      if (idx >= 0) {\n        storageTypes = storageTypes.slice(idx);\n        storageType = null;\n      }\n    }\n\n    if (!storageType) {\n      storageType = this.storageUtil.findStorageType(storageTypes);\n    }\n    return this.storageUtil.getStorageByType(storageType, options);\n  }\n\n  // stateToken, interactionHandle\n  getTransactionStorage(options?: StorageOptions): TransactionStorage {\n    options = this.getOptionsForSection('transaction', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || TRANSACTION_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  // access_token, id_token, refresh_token\n  getTokenStorage(options?: StorageOptions): StorageProvider {\n    options = this.getOptionsForSection('token', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || TOKEN_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  // caches well-known response, among others\n  getHttpCache(options?: StorageOptions): StorageProvider {\n    options = this.getOptionsForSection('cache', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || CACHE_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  // Will be removed in an upcoming major version. OKTA-362589\n  getLegacyPKCEStorage(options?: StorageOptions): PKCEStorage {\n    options = this.getOptionsForSection('legacy-pkce', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || PKCE_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  getLegacyOAuthParamsStorage(options?: StorageOptions): StorageProvider {\n    options = this.getOptionsForSection('legacy-oauth-params', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || REDIRECT_OAUTH_PARAMS_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n}\n"],"file":"StorageManager.js"}