{"version":3,"sources":["../../../lib/oidc/verifyToken.ts"],"names":["verifyToken","sdk","token","validationParams","idToken","AuthSdkError","jwt","openIdConfig","validationOptions","issuer","clientId","options","ignoreSignature","Object","assign","payload","features","isTokenVerifySupported","key","header","kid","valid","sdkCrypto","accessToken","claims","at_hash","hash","getOidcHash"],"mappings":";;;;;;AAcA;;AACA;;AACA;;AAEA;;AACA;;AAnBA;;AACA;;AACA;;;;;;;;;;;;AAmBA;AACO,eAAeA,WAAf,CAA2BC,GAA3B,EAA0CC,KAA1C,EAA0DC,gBAA1D,EAAiH;AACtH,MAAI,CAACD,KAAD,IAAU,CAACA,KAAK,CAACE,OAArB,EAA8B;AAC5B,UAAM,IAAIC,oBAAJ,CAAiB,+BAAjB,CAAN;AACD,GAHqH,CAKtH;;;AACA,MAAIC,GAAG,GAAG,8BAAYJ,KAAK,CAACE,OAAlB,CAAV;AAEA,MAAIG,YAAY,GAAG,MAAM,6BAAaN,GAAb,CAAzB,CARsH,CAQ1E;;AAE5C,MAAIO,iBAAoC,GAAG;AACzCC,IAAAA,MAAM,EAAEF,YAAY,CAACE,MADoB;AACZ;AAC7BC,IAAAA,QAAQ,EAAET,GAAG,CAACU,OAAJ,CAAYD,QAFmB;AAGzCE,IAAAA,eAAe,EAAEX,GAAG,CAACU,OAAJ,CAAYC;AAHY,GAA3C;AAMAC,EAAAA,MAAM,CAACC,MAAP,CAAcN,iBAAd,EAAiCL,gBAAjC,EAhBsH,CAkBtH;;AACA,4BAAeF,GAAf,EAAoBK,GAAG,CAACS,OAAxB,EAAiCP,iBAAjC,EAnBsH,CAqBtH;AACA;;AACA,MAAIA,iBAAiB,CAACI,eAAlB,IAAqC,IAArC,IAA6C,CAACX,GAAG,CAACe,QAAJ,CAAaC,sBAAb,EAAlD,EAAyF;AACvF,WAAOf,KAAP;AACD;;AAED,QAAMgB,GAAG,GAAG,MAAM,uBAAOjB,GAAP,EAAYC,KAAK,CAACO,MAAlB,EAA0BH,GAAG,CAACa,MAAJ,CAAWC,GAArC,CAAlB;AACA,QAAMC,KAAK,GAAG,MAAMC,SAAS,CAACtB,WAAV,CAAsBE,KAAK,CAACE,OAA5B,EAAqCc,GAArC,CAApB;;AACA,MAAI,CAACG,KAAL,EAAY;AACV,UAAM,IAAIhB,oBAAJ,CAAiB,kCAAjB,CAAN;AACD;;AACD,MAAIF,gBAAgB,IAAIA,gBAAgB,CAACoB,WAArC,IAAoDrB,KAAK,CAACsB,MAAN,CAAaC,OAArE,EAA8E;AAC5E,UAAMC,IAAI,GAAG,MAAMJ,SAAS,CAACK,WAAV,CAAsBxB,gBAAgB,CAACoB,WAAvC,CAAnB;;AACA,QAAIG,IAAI,KAAKxB,KAAK,CAACsB,MAAN,CAAaC,OAA1B,EAAmC;AACjC,YAAM,IAAIpB,oBAAJ,CAAiB,gCAAjB,CAAN;AACD;AACF;;AACD,SAAOH,KAAP;AACD","sourcesContent":["/* eslint-disable max-len */\n/* eslint-disable complexity */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { getWellKnown, getKey } from './endpoints/well-known';\nimport { validateClaims } from './util';\nimport { AuthSdkError } from '../errors';\nimport { IDToken, OktaAuth, TokenVerifyParams } from '../types';\nimport { decodeToken } from './decodeToken';\nimport * as sdkCrypto from '../crypto';\n\n// Verify the id token\nexport async function verifyToken(sdk: OktaAuth, token: IDToken, validationParams: TokenVerifyParams): Promise<IDToken> {\n  if (!token || !token.idToken) {\n    throw new AuthSdkError('Only idTokens may be verified');\n  }\n\n  // Decode the Jwt object (may throw)\n  var jwt = decodeToken(token.idToken);\n\n  var openIdConfig = await getWellKnown(sdk); // using sdk.options.issuer\n\n  var validationOptions: TokenVerifyParams = {\n    issuer: openIdConfig.issuer, // sdk.options.issuer may point to a proxy. Use \"real\" issuer for validation.\n    clientId: sdk.options.clientId,\n    ignoreSignature: sdk.options.ignoreSignature\n  };\n\n  Object.assign(validationOptions, validationParams);\n\n  // Standard claim validation (may throw)\n  validateClaims(sdk, jwt.payload, validationOptions);\n\n  // If the browser doesn't support native crypto or we choose not\n  // to verify the signature, bail early\n  if (validationOptions.ignoreSignature == true || !sdk.features.isTokenVerifySupported()) {\n    return token;\n  }\n\n  const key = await getKey(sdk, token.issuer, jwt.header.kid);\n  const valid = await sdkCrypto.verifyToken(token.idToken, key);\n  if (!valid) {\n    throw new AuthSdkError('The token signature is not valid');\n  }\n  if (validationParams && validationParams.accessToken && token.claims.at_hash) {\n    const hash = await sdkCrypto.getOidcHash(validationParams.accessToken);\n    if (hash !== token.claims.at_hash) {\n      throw new AuthSdkError('Token hash verification failed');\n    }\n  }\n  return token;\n}\n"],"file":"verifyToken.js"}