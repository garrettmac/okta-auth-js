{"version":3,"sources":["../../../lib/oidc/renewTokens.ts"],"names":["renewTokens","sdk","options","tokenManager","getTokens","then","tokens","refreshToken","refreshTokenObject","Object","assign","scopes","authorizeUrl","userinfoUrl","issuer","pkce","responseType","res"],"mappings":";;;;AAaA;;AACA;;AACA;;AAfA;;;;;;;;;;;;AAiBO,SAASA,WAAT,CAAqBC,GAArB,EAA0BC,OAA1B,EAAiE;AAEtE;AAEA;AACA,SAAOD,GAAG,CAACE,YAAJ,CAAiBC,SAAjB,GACJC,IADI,CACCC,MAAM,IAAIA,MAAM,CAACC,YADlB,EAEJF,IAFI,CAECG,kBAAkB,IAAI;AAE1B,QAAIA,kBAAJ,EAAwB;AACtB,aAAO,oDAAuBP,GAAvB,EAA4BC,OAA5B,EAAqCM,kBAArC,CAAP;AACD;;AAEDN,IAAAA,OAAO,GAAGO,MAAM,CAACC,MAAP,CAAc;AACtBC,MAAAA,MAAM,EAAEV,GAAG,CAACC,OAAJ,CAAYS,MADE;AAEtBC,MAAAA,YAAY,EAAEX,GAAG,CAACC,OAAJ,CAAYU,YAFJ;AAGtBC,MAAAA,WAAW,EAAEZ,GAAG,CAACC,OAAJ,CAAYW,WAHH;AAItBC,MAAAA,MAAM,EAAEb,GAAG,CAACC,OAAJ,CAAYY;AAJE,KAAd,EAKPZ,OALO,CAAV;;AAOA,QAAID,GAAG,CAACC,OAAJ,CAAYa,IAAhB,EAAsB;AACpBb,MAAAA,OAAO,CAACc,YAAR,GAAuB,MAAvB;AACD,KAFD,MAEO;AACL,YAAM;AAAEA,QAAAA;AAAF,UAAmB,iCAAsBf,GAAtB,CAAzB;AACAC,MAAAA,OAAO,CAACc,YAAR,GAAuBA,YAAvB;AACD;;AAED,WAAO,wCAAiBf,GAAjB,EAAsBC,OAAtB,EACJG,IADI,CACCY,GAAG,IAAIA,GAAG,CAACX,MADZ,CAAP;AAED,GAxBI,CAAP;AAyBD","sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { TokenParams, Tokens, RefreshToken } from '../types';\nimport { getWithoutPrompt } from './getWithoutPrompt';\nimport { renewTokensWithRefresh } from './renewTokensWithRefresh';\nimport { getDefaultTokenParams } from './util';\n\nexport function renewTokens(sdk, options: TokenParams): Promise<Tokens> {\n  \n  // If we have a refresh token, renew using that, otherwise getWithoutPrompt\n\n  // Calling via async as auth-js doesn't yet (as of 4.2) ensure that updateAuthState() was ever called\n  return sdk.tokenManager.getTokens()\n    .then(tokens => tokens.refreshToken as RefreshToken)\n    .then(refreshTokenObject => {\n\n      if (refreshTokenObject) {\n        return renewTokensWithRefresh(sdk, options, refreshTokenObject);\n      }\n\n      options = Object.assign({\n        scopes: sdk.options.scopes,\n        authorizeUrl: sdk.options.authorizeUrl,\n        userinfoUrl: sdk.options.userinfoUrl,\n        issuer: sdk.options.issuer\n      }, options);\n\n      if (sdk.options.pkce) {\n        options.responseType = 'code';\n      } else {\n        const { responseType } = getDefaultTokenParams(sdk);\n        options.responseType = responseType;\n      }\n\n      return getWithoutPrompt(sdk, options)\n        .then(res => res.tokens);\n    });\n}\n"],"file":"renewTokens.js"}