{"version":3,"sources":["../../../lib/oidc/renewToken.ts"],"names":["renewToken","sdk","token","Promise","reject","AuthSdkError","responseType","options","pkce","scopes","authorizeUrl","userinfoUrl","issuer","then","res","tokens","idToken","accessToken"],"mappings":";;;;AAYA;;AACA;;AACA;;AAdA;;;;;;;;;;;;AAgBO,SAASA,UAAT,CAAoBC,GAApB,EAAmCC,KAAnC,EAAiE;AACtE;AACA,MAAI,CAAC,oBAAQA,KAAR,CAAL,EAAqB;AACnB,WAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,oBAAJ,CAAiB,uCACrC,kDADoB,CAAf,CAAP;AAED;;AAED,MAAIC,YAAJ;;AACA,MAAIL,GAAG,CAACM,OAAJ,CAAYC,IAAhB,EAAsB;AACpBF,IAAAA,YAAY,GAAG,MAAf;AACD,GAFD,MAEO,IAAI,0BAAcJ,KAAd,CAAJ,EAA0B;AAC/BI,IAAAA,YAAY,GAAG,OAAf;AACD,GAFM,MAEA;AACLA,IAAAA,YAAY,GAAG,UAAf;AACD;;AAED,QAAM;AAAEG,IAAAA,MAAF;AAAUC,IAAAA,YAAV;AAAwBC,IAAAA,WAAxB;AAAqCC,IAAAA;AAArC,MAAgDV,KAAtD;AACA,SAAO,wCAAiBD,GAAjB,EAAsB;AAC3BK,IAAAA,YAD2B;AAE3BG,IAAAA,MAF2B;AAG3BC,IAAAA,YAH2B;AAI3BC,IAAAA,WAJ2B;AAK3BC,IAAAA;AAL2B,GAAtB,EAOJC,IAPI,CAOC,UAAUC,GAAV,EAAe;AACnB;AACA,QAAIC,MAAM,GAAGD,GAAG,CAACC,MAAjB;AACA,WAAO,sBAAUb,KAAV,IAAmBa,MAAM,CAACC,OAA1B,GAAoCD,MAAM,CAACE,WAAlD;AACD,GAXI,CAAP;AAYD","sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { AuthSdkError } from '../errors';\nimport { OktaAuth, Token, isToken, isAccessToken, AccessToken, IDToken, isIDToken } from '../types';\nimport { getWithoutPrompt } from './getWithoutPrompt';\n\nexport function renewToken(sdk: OktaAuth, token: Token): Promise<Token> {\n  // Note: This is not used when a refresh token is present\n  if (!isToken(token)) {\n    return Promise.reject(new AuthSdkError('Renew must be passed a token with ' +\n      'an array of scopes and an accessToken or idToken'));\n  }\n\n  var responseType;\n  if (sdk.options.pkce) {\n    responseType = 'code';\n  } else if (isAccessToken(token)) {\n    responseType = 'token';\n  } else {\n    responseType = 'id_token';\n  }\n\n  const { scopes, authorizeUrl, userinfoUrl, issuer } = token as (AccessToken & IDToken);\n  return getWithoutPrompt(sdk, {\n    responseType,\n    scopes,\n    authorizeUrl,\n    userinfoUrl,\n    issuer\n  })\n    .then(function (res) {\n      // Multiple tokens may have come back. Return only the token which was requested.\n      var tokens = res.tokens;\n      return isIDToken(token) ? tokens.idToken : tokens.accessToken;\n    });\n}\n"],"file":"renewToken.js"}