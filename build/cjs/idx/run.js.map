{"version":3,"sources":["../../../lib/idx/run.ts"],"names":["run","authClient","options","flow","actions","tokens","nextStep","interactionHandle","error","status","idxResponse","stateHandle","toPersist","action","values","interactionCode","nextStepFromResp","formError","IdxStatus","PENDING","meta","transactionManager","load","codeVerifier","clientId","redirectUri","scopes","urls","ignoreSignature","token","exchangeCodeForTokens","SUCCESS","err","FAILED","clear","authTransaction","AuthTransaction"],"mappings":";;;;AACA;;AACA;;AACA;;AACA;;AAJA;AAkBO,eAAeA,GAAf,CAAmBC,UAAnB,EAAyCC,OAAzC,EAA2E;AAChF,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,OAA1B;AACA,MAAIG,MAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,iBAAJ;AACA,MAAIC,KAAJ;AACA,MAAIC,MAAJ;;AAEA,MAAI;AACF;AACA,QAAI;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAA+B,MAAM,wBAASV,UAAT,EAAqBC,OAArB,CAAzC;AACAK,IAAAA,iBAAiB,GAAGG,WAAW,CAACE,SAAZ,CAAsBL,iBAA1C,CAHE,CAKF;;AACA,QAAIH,OAAJ,EAAa;AACX,WAAK,IAAIS,MAAT,IAAmBT,OAAnB,EAA4B;AAC1B,YAAI,OAAOM,WAAW,CAACN,OAAZ,CAAoBS,MAApB,CAAP,KAAuC,UAA3C,EAAuD;AACrDH,UAAAA,WAAW,GAAG,MAAMA,WAAW,CAACN,OAAZ,CAAoBS,MAApB,GAApB;AACA;AACD;AACF;AACF;;AAED,UAAMC,MAAyB,GAAG,EAAE,GAAGZ,OAAL;AAAcS,MAAAA;AAAd,KAAlC,CAfE,CAiBF;;AACA,UAAM;AACJD,MAAAA,WAAW,EAAE;AACXK,QAAAA;AADW,UAET,EAHA;AAIJT,MAAAA,QAAQ,EAAEU,gBAJN;AAKJC,MAAAA;AALI,QAMF,MAAM,0BAAUP,WAAV,EAAuBP,IAAvB,EAA6BW,MAA7B,CANV,CAlBE,CA0BF;;AACAR,IAAAA,QAAQ,GAAGU,gBAAX;AACAR,IAAAA,KAAK,GAAGS,SAAR,CA5BE,CA8BF;;AACAR,IAAAA,MAAM,GAAGS,iBAAUC,OAAnB;;AACA,QAAIJ,eAAJ,EAAqB;AACnB,YAAMK,IAAI,GAAGnB,UAAU,CAACoB,kBAAX,CAA8BC,IAA9B,EAAb;AACA,YAAM;AACJC,QAAAA,YADI;AAEJC,QAAAA,QAFI;AAGJC,QAAAA,WAHI;AAIJC,QAAAA,MAJI;AAKJC,QAAAA,IALI;AAMJC,QAAAA;AANI,UAOFR,IAPJ;AASAf,MAAAA,MAAM,GAAG,MAAMJ,UAAU,CAAC4B,KAAX,CAAiBC,qBAAjB,CAAuC;AACpDf,QAAAA,eADoD;AAEpDQ,QAAAA,YAFoD;AAGpDC,QAAAA,QAHoD;AAIpDC,QAAAA,WAJoD;AAKpDC,QAAAA,MALoD;AAMpDE,QAAAA;AANoD,OAAvC,EAOZD,IAPY,CAAf;AAQAlB,MAAAA,MAAM,GAAGS,iBAAUa,OAAnB;AACD;AACF,GArDD,CAqDE,OAAOC,GAAP,EAAY;AACZxB,IAAAA,KAAK,GAAGwB,GAAR;AACAvB,IAAAA,MAAM,GAAGS,iBAAUe,MAAnB,CAFY,CAGZ;;AACAhC,IAAAA,UAAU,CAACoB,kBAAX,CAA8Ba,KAA9B;AACD;;AAED,QAAMC,eAAe,GAAG,IAAIC,mBAAJ,CAAoBnC,UAApB,EAAgC;AACtDM,IAAAA,iBADsD;AAEtDF,IAAAA,MAAM,EAAEA,MAAM,GAAGA,MAAM,CAACA,MAAV,GAAmB,IAFqB;AAGtDI,IAAAA,MAHsD;AAItDH,IAAAA,QAJsD;AAKtDE,IAAAA;AALsD,GAAhC,CAAxB;AAOA,SAAO2B,eAAP;AACD","sourcesContent":["/* eslint-disable max-statements, max-depth */\nimport { AuthTransaction } from '../tx';\nimport { interact } from './interact';\nimport { remediate } from './remediate';\nimport { \n  OktaAuth,\n  IdxOptions,\n  IdxTransactionMeta,\n  RemediationValues,\n  RemediationFlow,\n  IdxStatus,\n} from '../types';\n\nexport interface RunOptions {\n  flow: RemediationFlow;\n  actions?: string[];\n}\n\nexport async function run(authClient: OktaAuth, options: RunOptions & IdxOptions) {\n  const { flow, actions } = options;\n  let tokens;\n  let nextStep;\n  let interactionHandle;\n  let error;\n  let status: IdxStatus;\n\n  try {\n    // Start/resume the flow\n    let { idxResponse, stateHandle } = await interact(authClient, options);\n    interactionHandle = idxResponse.toPersist.interactionHandle;\n\n    // Call first available option\n    if (actions) {\n      for (let action of actions) {\n        if (typeof idxResponse.actions[action] === 'function') {\n          idxResponse = await idxResponse.actions[action]();\n          break;\n        }\n      }\n    }\n\n    const values: RemediationValues = { ...options, stateHandle };\n\n    // Can we handle the remediations?\n    const { \n      idxResponse: { \n        interactionCode,\n      } = {}, \n      nextStep: nextStepFromResp,\n      formError,\n    } = await remediate(idxResponse, flow, values);\n\n    // Track nextStep and formError\n    nextStep = nextStepFromResp;\n    error = formError;\n\n    // Did we get an interaction code?\n    status = IdxStatus.PENDING;\n    if (interactionCode) {\n      const meta = authClient.transactionManager.load() as IdxTransactionMeta;\n      const {\n        codeVerifier,\n        clientId,\n        redirectUri,\n        scopes,\n        urls,\n        ignoreSignature\n      } = meta;\n\n      tokens = await authClient.token.exchangeCodeForTokens({\n        interactionCode,\n        codeVerifier,\n        clientId,\n        redirectUri,\n        scopes,\n        ignoreSignature\n      }, urls);\n      status = IdxStatus.SUCCESS;\n    }\n  } catch (err) {\n    error = err;\n    status = IdxStatus.FAILED;\n    // Clear transaction meta when error is not handlable\n    authClient.transactionManager.clear();\n  }\n  \n  const authTransaction = new AuthTransaction(authClient, {\n    interactionHandle,\n    tokens: tokens ? tokens.tokens : null,\n    status,\n    nextStep,\n    error,\n  });\n  return authTransaction;\n}"],"file":"run.js"}