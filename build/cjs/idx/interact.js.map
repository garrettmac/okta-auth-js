{"version":3,"sources":["../../../lib/idx/interact.ts"],"names":["interact","authClient","options","meta","interactionHandle","codeVerifier","codeChallenge","codeChallengeMethod","issuer","clientId","redirectUri","version","IDX_API_VERSION","state","scopes","Object","assign","idx","start","then","idxResponse","toPersist","stateHandle","context"],"mappings":";;;;;;AAgBA;;AAEA;;AACA;;AAnBA;;;;;;;;;;;AAYA;AACA;AACA;AAOA;AACO,eAAeA,QAAf,CAAyBC,UAAzB,EAA+CC,OAAwB,GAAG,EAA1E,EAAyG;AAE9G,MAAIC,IAAI,GAAG,MAAM,yCAAmBF,UAAnB,CAAjB,CAF8G,CAI9G;;AACA,QAAM;AACJG,IAAAA,iBADI;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA;AAJI,MAKFJ,IALJ,CAL8G,CAY9G;;AACA,QAAM;AAAEK,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA;AAApB,MAAoCT,UAAU,CAACC,OAArD;AACA,QAAMS,OAAO,GAAGC,0BAAhB,CAd8G,CAgB9G;;AACA,MAAIC,KAAK,GAAGX,OAAO,CAACW,KAAR,IAAiBZ,UAAU,CAACC,OAAX,CAAmBW,KAAhD;AACA,MAAIC,MAAM,GAAGZ,OAAO,CAACY,MAAR,IAAkBb,UAAU,CAACC,OAAX,CAAmBY,MAAlD;;AAEA,MAAI,CAACV,iBAAL,EAAwB;AACtB;AACAS,IAAAA,KAAK,GAAGA,KAAK,IAAIV,IAAI,CAACU,KAAtB;AACAC,IAAAA,MAAM,GAAGA,MAAM,IAAIX,IAAI,CAACW,MAAxB;AACD,GAJD,MAIO;AACL;AACAD,IAAAA,KAAK,GAAGV,IAAI,CAACU,KAAb;AACAC,IAAAA,MAAM,GAAGX,IAAI,CAACW,MAAd;AACD;;AACDX,EAAAA,IAAI,GAAGY,MAAM,CAACC,MAAP,CAAcb,IAAd,EAAoB;AAAEU,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAApB,CAAP,CA7B8G,CA6B/D;;AAE/C,SAAOG,mBAAIC,KAAJ,CAAU;AACf;AACAd,IAAAA,iBAFe;AAGfO,IAAAA,OAHe;AAKf;AACAF,IAAAA,QANe;AAOfD,IAAAA,MAPe;AAQfM,IAAAA,MARe;AASfD,IAAAA,KATe;AAUfH,IAAAA,WAVe;AAYf;AACAL,IAAAA,YAbe;AAcfC,IAAAA,aAde;AAefC,IAAAA;AAfe,GAAV,EAiBJY,IAjBI,CAiBCC,WAAW,IAAI;AACnB;AACA,QAAI,CAAChB,iBAAD,IAAsBgB,WAAW,CAACC,SAAZ,CAAsBjB,iBAAhD,EAAmE;AACjED,MAAAA,IAAI,GAAGY,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBb,IAAlB,EAAwB;AAC7BC,QAAAA,iBAAiB,EAAEgB,WAAW,CAACC,SAAZ,CAAsBjB;AADZ,OAAxB,CAAP;AAGD,KANkB,CAQnB;;;AACA,8CAAoBH,UAApB,EAAgCE,IAAhC;AAEA,WAAO;AACLiB,MAAAA,WADK;AAELhB,MAAAA,iBAAiB,EAAED,IAAI,CAACC,iBAFnB;AAGLD,MAAAA,IAHK;AAILmB,MAAAA,WAAW,EAAEF,WAAW,CAACG,OAAZ,CAAoBD,WAJ5B;AAKLT,MAAAA;AALK,KAAP;AAOD,GAnCI,CAAP;AAoCD","sourcesContent":["/*!\n * Copyright (c) 2021, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n// BaseLoginRouter contains the more complicated router logic - rendering/\n// transition, etc. Most router changes should happen in LoginRouter (which is\n// responsible for adding new routes)\n\nimport idx from '@okta/okta-idx-js';\nimport { InteractOptions, OktaAuth, InteractResponse } from '../types';\nimport { IDX_API_VERSION } from '../constants';\nimport { getTransactionMeta, saveTransactionMeta } from './transactionMeta';\n\n// Begin or resume a transaction. Returns an interaction handle\nexport async function interact (authClient: OktaAuth, options: InteractOptions = {}): Promise<InteractResponse> {\n\n  let meta = await getTransactionMeta(authClient);\n\n  // These properties are always loaded from meta (or calculated fresh)\n  const {\n    interactionHandle,\n    codeVerifier,\n    codeChallenge,\n    codeChallengeMethod\n  } = meta;\n\n  // These properties are defined by global configuration\n  const { issuer, clientId, redirectUri } = authClient.options;\n  const version = IDX_API_VERSION;\n\n  // These properties can be set in options, but also have a default value in global configuration.\n  let state = options.state || authClient.options.state;\n  let scopes = options.scopes || authClient.options.scopes;\n\n  if (!interactionHandle) {\n    // new transaction: prefer configured values\n    state = state || meta.state;\n    scopes = scopes || meta.scopes;\n  } else {\n    // saved transaction: use only saved values\n    state = meta.state;\n    scopes = meta.scopes;\n  }\n  meta = Object.assign(meta, { state, scopes }); // save back to meta\n  \n  return idx.start({\n    // if interactionHandle is undefined here, idx will bootstrap a new interactionHandle\n    interactionHandle,\n    version,\n\n    // OAuth\n    clientId, \n    issuer,\n    scopes,\n    state,\n    redirectUri,\n\n    // PKCE\n    codeVerifier,\n    codeChallenge,\n    codeChallengeMethod\n  })\n    .then(idxResponse => {\n      // If this is a new transaction an interactionHandle was returned\n      if (!interactionHandle && idxResponse.toPersist.interactionHandle) {\n        meta = Object.assign({}, meta, {\n          interactionHandle: idxResponse.toPersist.interactionHandle\n        });\n      }\n\n      // Save transaction meta so it can be resumed\n      saveTransactionMeta(authClient, meta);\n\n      return {\n        idxResponse,\n        interactionHandle: meta.interactionHandle,\n        meta,\n        stateHandle: idxResponse.context.stateHandle,\n        state\n      };\n    });\n}\n"],"file":"interact.js"}