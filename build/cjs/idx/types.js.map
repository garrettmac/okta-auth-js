{"version":3,"sources":["../../../lib/idx/types.ts"],"names":["IdxStatus","isRawIdxResponse","obj","version"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AACA;;AACA;;AACA;;AACA;;IAsCYA,S;;;WAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;GAAAA,S,yBAAAA,S;;AAwDL,SAASC,gBAAT,CAA0BC,GAA1B,EAA2D;AAChE,SAAOA,GAAG,IAAIA,GAAG,CAACC,OAAlB;AACD,C,CAED","sourcesContent":["import { IdxTransactionMeta } from '../types/Transaction';\nimport { Base as Remeditor } from './remediators';\n\nexport { RemediationValues } from './remediators';\nexport { AuthenticationOptions } from './authenticate';\nexport { RegistrationOptions } from './register';\nexport { PasswordRecoveryOptions } from './recoverPassword';\nexport { CancelOptions } from './cancel';\n\nexport type RemediationFlow = Record<string, typeof Remeditor>;\n\n// A map from IDX data values (server spec) to RemediationValues (client spec)\nexport type IdxToRemediationValueMap = Record<string, string[] | string | boolean>;\n\nexport type NextStep = {\n  name: string;\n  type?: string;\n}\n\nexport interface AcceptsInteractionHandle {\n  interactionHandle?: string;\n}\n\nexport interface IntrospectOptions extends AcceptsInteractionHandle {\n  stateHandle?: string;\n}\n\nexport interface InteractOptions extends AcceptsInteractionHandle {\n  state?: string;\n  scopes?: string[];\n}\n\nexport interface InteractResponse {\n  state?: string;\n  stateHandle?: string;\n  interactionHandle?: string;\n  idxResponse?: IdxResponse;\n  meta?: IdxTransactionMeta;\n}\n\nexport interface IdxOptions extends\n  InteractOptions,\n  AcceptsInteractionHandle {\n}\n\nexport enum IdxStatus {\n  SUCCESS,\n  PENDING,\n  FAILED,\n}\n\nexport interface IdpConfig {\n  id: string;\n  name: string;\n}\n\n// TODO: remove when idx-js provides type information\nexport interface IdxRemeditionValue {\n  name: string;\n  type?: string;\n  required?: boolean;\n  value?: string;\n  form?: {\n    value: IdxRemeditionValue[];\n  };\n  options?: IdxRemediation[];\n}\nexport interface IdxRemediation {\n  name: string;\n  label?: string;\n  value: IdxRemeditionValue[];\n  relatesTo: {\n    type: string;\n    value: {\n      type: string;\n    };\n  };\n  idp?: IdpConfig;\n  href?: string;\n  method?: string;\n  type?: string;\n}\n\nexport interface IdxMessage {\n  message: string;\n  class: string;\n}\n\nexport interface IdxMessages {\n  type: string; // \"array\"\n  value: IdxMessage[];\n}\n\n// JSON response from the server\nexport interface RawIdxResponse {\n  version: string;\n  stateHandle: string;\n  remediation?: IdxRemediation[];\n  messages?: IdxMessages;\n}\n\nexport function isRawIdxResponse(obj: any): obj is RawIdxResponse {\n  return obj && obj.version;\n}\n\n// Object returned from idx-js\nexport interface IdxResponse {\n  proceed: (remediationName: string, params: unknown) => Promise<IdxResponse>;\n  neededToProceed: IdxRemediation[];\n  rawIdxState: RawIdxResponse;\n  interactionCode?: string;\n  actions: Record<string, Function>;\n  toPersist: {\n    interactionHandle?: string;\n  };\n}\n"],"file":"types.js"}