{"version":3,"sources":["../../../lib/idx/util.ts"],"names":["createApiError","res","allErrors","messages","Array","isArray","value","map","o","message","AuthApiError","errorSummary","join","errorCauses","getAllValues","idxRemediation","r","name","getRequiredValues","reduce","required","cur","push","findRemediationByName","find","getIdxRemediation","remediators","idxRemediations","Object","keys","includes","isErrorResponse","idxResponse","rawIdxState","length","titleCase","str","charAt","toUpperCase","substring"],"mappings":";;;;;;;;;;AAAA;;AAGO,SAASA,cAAT,CAAwBC,GAAxB,EAAuC;AAC5C,MAAIC,SAAS,GAAG,EAAhB;;AAEA,MAAID,GAAG,CAACE,QAAJ,IAAgBC,KAAK,CAACC,OAAN,CAAcJ,GAAG,CAACE,QAAJ,CAAaG,KAA3B,CAApB,EAAuD;AACrDJ,IAAAA,SAAS,GAAGD,GAAG,CAACE,QAAJ,CAAaG,KAAb,CAAmBC,GAAnB,CAAuBC,CAAC,IAAIA,CAAC,CAACC,OAA9B,CAAZ;AACD;;AAED,SAAO,IAAIC,oBAAJ,CAAiB;AACtBC,IAAAA,YAAY,EAAET,SAAS,CAACU,IAAV,CAAe,IAAf,CADQ;AAEtBC,IAAAA,WAAW,EAAEX;AAFS,GAAjB,CAAP;AAID;;AAEM,SAASY,YAAT,CAAsBC,cAAtB,EAAsD;AAC3D,SAAOA,cAAc,CAACT,KAAf,CAAqBC,GAArB,CAAyBS,CAAC,IAAIA,CAAC,CAACC,IAAhC,CAAP;AACD;;AAEM,SAASC,iBAAT,CAA2BH,cAA3B,EAA2D;AAChE,SAAOA,cAAc,CAACT,KAAf,CAAqBa,MAArB,CAA4B,CAACC,QAAD,EAAWC,GAAX,KAAmB;AACpD,QAAIA,GAAG,CAACD,QAAR,EAAkB;AAChBA,MAAAA,QAAQ,CAACE,IAAT,CAAcD,GAAG,CAACJ,IAAlB;AACD;;AACD,WAAOG,QAAP;AACD,GALM,EAKJ,EALI,CAAP;AAMD;;AAEM,SAASG,qBAAT,CAA+BR,cAA/B,EAA+DE,IAA/D,EAA6E;AAClF,SAAOF,cAAc,CAACT,KAAf,CAAqBkB,IAArB,CAA2BlB,KAAD,IAAW;AAC1C,QAAIA,KAAK,CAACW,IAAN,KAAeA,IAAnB,EAAyB;AACvB,aAAO,IAAP;AACD;AACF,GAJM,CAAP;AAKD,C,CAED;;;AACO,SAASQ,iBAAT,CAA2BC,WAA3B,EAAwCC,eAAxC,EAAyD;AAC9D,SAAOA,eAAe,CAACH,IAAhB,CAAqBT,cAAc,IAAIa,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBI,QAAzB,CAAkCf,cAAc,CAACE,IAAjD,CAAvC,CAAP;AACD;;AAEM,SAASc,eAAT,CAAyBC,WAAzB,EAAmD;AACxD,QAAMC,WAAW,GAAGD,WAAW,CAACC,WAAhC;;AACA,MAAIA,WAAW,CAAC9B,QAAZ,IAAwB8B,WAAW,CAAC9B,QAAZ,CAAqBG,KAA7C,IAAsD2B,WAAW,CAAC9B,QAAZ,CAAqBG,KAArB,CAA2B4B,MAA3B,GAAoC,CAA9F,EAAiG;AAC/F,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD;;AAEM,SAASC,SAAT,CAAmBC,GAAnB,EAAgC;AACrC,SAAOA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BF,GAAG,CAACG,SAAJ,CAAc,CAAd,CAArC;AACD","sourcesContent":["import { AuthApiError } from '../errors';\nimport { APIError, IdxRemediation, IdxResponse } from '../types';\n\nexport function createApiError(res): APIError {\n  let allErrors = [];\n\n  if (res.messages && Array.isArray(res.messages.value)) {\n    allErrors = res.messages.value.map(o => o.message);\n  }\n\n  return new AuthApiError({\n    errorSummary: allErrors.join('. '),\n    errorCauses: allErrors\n  });\n}\n\nexport function getAllValues(idxRemediation: IdxRemediation) {\n  return idxRemediation.value.map(r => r.name);\n}\n\nexport function getRequiredValues(idxRemediation: IdxRemediation) {\n  return idxRemediation.value.reduce((required, cur) => {\n    if (cur.required) {\n      required.push(cur.name);\n    }\n    return required;\n  }, []);\n}\n\nexport function findRemediationByName(idxRemediation: IdxRemediation, name: string) {\n  return idxRemediation.value.find((value) => {\n    if (value.name === name) {\n      return true;\n    }\n  });\n}\n\n// Return first match idxRemediation in allowed remediators\nexport function getIdxRemediation(remediators, idxRemediations) {\n  return idxRemediations.find(idxRemediation => Object.keys(remediators).includes(idxRemediation.name));\n}\n\nexport function isErrorResponse(idxResponse: IdxResponse) {\n  const rawIdxState = idxResponse.rawIdxState;\n  if (rawIdxState.messages && rawIdxState.messages.value && rawIdxState.messages.value.length > 0) {\n    return true;\n  }\n  return false;\n}\n\nexport function titleCase(str: string) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n}\n"],"file":"util.js"}