{"version":3,"sources":["../../../lib/idx/register.ts"],"names":["flow","SelectEnrollProfile","EnrollProfile","SelectAuthenticator","EnrollOrChallengeAuthenticator","register","authClient","options"],"mappings":";;;;AAMA;;AACA;;AAWA,MAAMA,IAAqB,GAAG;AAC5B,2BAAyBC,gCADG;AAE5B,oBAAkBC,0BAFU;AAG5B,iCAA+BC,gCAHH;AAI5B,0BAAwBC;AAJI,CAA9B;;AAeO,eAAeC,QAAf,CACLC,UADK,EACiBC,OADjB,EAEqB;AAC1B,SAAO,cAAID,UAAJ,EAAgB,EACrB,GAAGC,OADkB;AAErBP,IAAAA;AAFqB,GAAhB,CAAP;AAID","sourcesContent":["import { AuthTransaction } from '../tx';\nimport { \n  IdxOptions, \n  OktaAuth, \n  RemediationFlow, \n} from '../types';\nimport { run } from './run';\nimport { \n  SelectEnrollProfile,\n  SelectEnrollProfileValues,\n  EnrollProfile,\n  EnrollProfileValues,\n  SelectAuthenticator,\n  SelectAuthenticatorValues,\n  EnrollOrChallengeAuthenticator,\n  EnrollOrChallengeAuthenticatorValues,\n} from './remediators';\n\nconst flow: RemediationFlow = {\n  'select-enroll-profile': SelectEnrollProfile,\n  'enroll-profile': EnrollProfile,\n  'select-authenticator-enroll': SelectAuthenticator,\n  'enroll-authenticator': EnrollOrChallengeAuthenticator,\n};\n\nexport interface RegistrationOptions extends \n  IdxOptions,\n  SelectEnrollProfileValues,\n  EnrollProfileValues,\n  SelectAuthenticatorValues,\n  EnrollOrChallengeAuthenticatorValues {\n}\n\nexport async function register(\n  authClient: OktaAuth, options: RegistrationOptions\n): Promise<AuthTransaction> {\n  return run(authClient, { \n    ...options, \n    flow,\n  });\n}\n"],"file":"register.js"}