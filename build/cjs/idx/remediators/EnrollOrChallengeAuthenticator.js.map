{"version":3,"sources":["../../../../lib/idx/remediators/EnrollOrChallengeAuthenticator.ts"],"names":["EnrollOrChallengeAuthenticator","Base","canRemediate","values","verificationCode","includes","remediation","relatesTo","value","type","password","mapCredentials","passcode","getNextStep","name","getErrorMessages","errorRemediation","form","reduce","errors","field","messages","push","message"],"mappings":";;;;;;;;AAAA;;AAOO,MAAMA,8BAAN,SAA6CC,UAA7C,CAAkD;AAAA;AAAA;AAAA,+CAGjD;AACJ,qBAAe,CAAC,UAAD,EAAa,kBAAb;AADX,KAHiD;AAAA;;AAOvDC,EAAAA,YAAY,GAAG;AACb,QAAI,KAAKC,MAAL,CAAYC,gBAAZ,IACG,CAAC,OAAD,EAAU,OAAV,EAAmBC,QAAnB,CAA4B,KAAKC,WAAL,CAAiBC,SAAjB,CAA2BC,KAA3B,CAAiCC,IAA7D,CADP,EAC2E;AACzE,aAAO,IAAP;AACD;;AACD,QAAI,KAAKN,MAAL,CAAYO,QAAZ,IACG,KAAKJ,WAAL,CAAiBC,SAAjB,CAA2BC,KAA3B,CAAiCC,IAAjC,KAA0C,UADjD,EAC6D;AAC3D,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;;AAEDE,EAAAA,cAAc,GAAG;AACf,WAAO;AACLC,MAAAA,QAAQ,EAAE,KAAKT,MAAL,CAAYC,gBAAZ,IAAgC,KAAKD,MAAL,CAAYO;AADjD,KAAP;AAGD;;AAEDG,EAAAA,WAAW,GAAG;AACZ,WAAO;AACLC,MAAAA,IAAI,EAAE,KAAKR,WAAL,CAAiBQ,IADlB;AAELL,MAAAA,IAAI,EAAE,KAAKH,WAAL,CAAiBC,SAAjB,CAA2BC,KAA3B,CAAiCC;AAFlC,KAAP;AAID;;AAEDM,EAAAA,gBAAgB,CAACC,gBAAD,EAAmB;AACjC,WAAOA,gBAAgB,CAACR,KAAjB,CAAuB,CAAvB,EAA0BS,IAA1B,CAA+BT,KAA/B,CAAqCU,MAArC,CAA4C,CAACC,MAAD,EAASC,KAAT,KAAmB;AACpE,UAAIA,KAAK,CAACC,QAAV,EAAoB;AAClBF,QAAAA,MAAM,CAACG,IAAP,CAAYF,KAAK,CAACC,QAAN,CAAeb,KAAf,CAAqB,CAArB,EAAwBe,OAApC;AACD;;AACD,aAAOJ,MAAP;AACD,KALM,EAKJ,EALI,CAAP;AAMD;;AAvCsD","sourcesContent":["import { Base, RemediationValues } from './Base';\n\nexport interface EnrollOrChallengeAuthenticatorValues extends RemediationValues {\n  verificationCode?: string;\n  password?: string;\n}\n\nexport class EnrollOrChallengeAuthenticator extends Base {\n  values: EnrollOrChallengeAuthenticatorValues;\n\n  map = {\n    'credentials': ['password', 'verificationCode']\n  };\n\n  canRemediate() {\n    if (this.values.verificationCode \n        && ['email', 'phone'].includes(this.remediation.relatesTo.value.type)) {\n      return true;\n    }\n    if (this.values.password \n        && this.remediation.relatesTo.value.type === 'password') {\n      return true;\n    }\n    return false;\n  }\n\n  mapCredentials() {\n    return { \n      passcode: this.values.verificationCode || this.values.password\n    };\n  }\n\n  getNextStep() {\n    return {\n      name: this.remediation.name,\n      type: this.remediation.relatesTo.value.type,\n    };\n  }\n\n  getErrorMessages(errorRemediation) {\n    return errorRemediation.value[0].form.value.reduce((errors, field) => {\n      if (field.messages) {\n        errors.push(field.messages.value[0].message);\n      }\n      return errors;\n    }, []);\n  }\n}\n"],"file":"EnrollOrChallengeAuthenticator.js"}