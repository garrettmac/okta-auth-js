{"version":3,"sources":["../../../../lib/idx/remediators/SelectAuthenticator.ts"],"names":["findMatchedOption","authenticators","options","option","authenticator","find","relatesTo","type","SelectAuthenticator","Base","constructor","remediation","values","remediationValue","value","name","canRemediate","length","matchedOption","AuthSdkError","getNextStep","map","label","mapAuthenticator","selectedOption","id","form"],"mappings":";;;;;;;;AAAA;;AAEA;;AAEA;AACA,SAASA,iBAAT,CAA2BC,cAA3B,EAA2CC,OAA3C,EAAoD;AAClD,MAAIC,MAAJ;;AACA,OAAK,IAAIC,aAAT,IAA0BH,cAA1B,EAA0C;AACxCE,IAAAA,MAAM,GAAGD,OAAO,CACbG,IADM,CACD,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAmBA,SAAS,CAACC,IAAV,KAAmBH,aADrC,CAAT;;AAEA,QAAID,MAAJ,EAAY;AACV;AACD;AACF;;AACD,SAAOA,MAAP;AACD;;AAMM,MAAMK,mBAAN,SAAkCC,UAAlC,CAAuC;AAS5CC,EAAAA,WAAW,CAACC,WAAD,EAA8BC,MAA9B,EAAyD;AAClE,UAAMD,WAAN,EAAmBC,MAAnB;AADkE,+CAJ9D;AACJR,MAAAA,aAAa,EAAE,IADX,CACgB;;AADhB,KAI8D;AAElE,SAAKS,gBAAL,GAAwB,KAAKF,WAAL,CAAiBG,KAAjB,CAAuBT,IAAvB,CAA4B,CAAC;AAAEU,MAAAA;AAAF,KAAD,KAAcA,IAAI,KAAK,eAAnD,CAAxB;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,UAAM;AAAEf,MAAAA;AAAF,QAAqB,KAAKW,MAAhC;AACA,UAAM;AAAEV,MAAAA;AAAF,QAAc,KAAKW,gBAAzB,CAFa,CAGb;;AACA,QAAI,CAACZ,cAAD,IAAmB,CAACA,cAAc,CAACgB,MAAvC,EAA+C;AAC7C,aAAO,KAAP;AACD,KANY,CAOb;;;AACA,UAAMC,aAAa,GAAGlB,iBAAiB,CAACC,cAAD,EAAiBC,OAAjB,CAAvC;;AACA,QAAIgB,aAAJ,EAAmB;AACjB,aAAO,IAAP;AACD,KAXY,CAYb;;;AACA,UAAM,IAAIC,oBAAJ,CAAiB,gFAAjB,CAAN;AACD;;AAEDC,EAAAA,WAAW,GAAG;AACZ,UAAMnB,cAAc,GAAG,KAAKY,gBAAL,CAAsBX,OAAtB,CAA8BmB,GAA9B,CAAkClB,MAAM,IAAI;AACjE,YAAM;AACJmB,QAAAA,KADI;AAEJhB,QAAAA,SAAS,EAAE;AAAEC,UAAAA;AAAF;AAFP,UAGFJ,MAHJ;AAIA,aAAO;AAAEmB,QAAAA,KAAF;AAASR,QAAAA,KAAK,EAAEP;AAAhB,OAAP;AACD,KANsB,CAAvB;AAOA,WAAO;AACLQ,MAAAA,IAAI,EAAE,KAAKJ,WAAL,CAAiBI,IADlB;AAELd,MAAAA;AAFK,KAAP;AAID;;AAEDsB,EAAAA,gBAAgB,CAACV,gBAAD,EAAuC;AACrD,UAAM;AAAEZ,MAAAA;AAAF,QAAqB,KAAKW,MAAhC;AACA,UAAM;AAAEV,MAAAA;AAAF,QAAcW,gBAApB;AACA,UAAMW,cAAc,GAAGxB,iBAAiB,CAACC,cAAD,EAAiBC,OAAjB,CAAxC;AACA,WAAO;AACLuB,MAAAA,EAAE,EAAED,cAAc,EAAEV,KAAhB,CAAsBY,IAAtB,CAA2BZ,KAA3B,CAAiCT,IAAjC,CAAsC,CAAC;AAAEU,QAAAA;AAAF,OAAD,KAAcA,IAAI,KAAK,IAA7D,EAAmED;AADlE,KAAP;AAGD;;AAnD2C","sourcesContent":["import { Base, RemediationValues } from './Base';\nimport { IdxRemediation, IdxRemeditionValue } from '../types';\nimport { AuthSdkError } from '../../errors';\n\n// Find matched authenticator in provided order\nfunction findMatchedOption(authenticators, options) {\n  let option;\n  for (let authenticator of authenticators) {\n    option = options\n      .find(({ relatesTo }) => relatesTo.type === authenticator);\n    if (option) {\n      break;\n    }\n  }\n  return option;\n}\n\nexport interface SelectAuthenticatorValues extends RemediationValues {\n  authenticators?: string[];\n}\n\nexport class SelectAuthenticator extends Base {\n  values: SelectAuthenticatorValues;\n  remediationValue: IdxRemeditionValue;\n  matchedOption: IdxRemediation;\n  \n  map = {\n    authenticator: null // value here does not matter, fall to the custom map function\n  }\n\n  constructor(remediation: IdxRemediation, values: RemediationValues) {\n    super(remediation, values);\n    this.remediationValue = this.remediation.value.find(({ name }) => name === 'authenticator');\n  }\n\n  canRemediate() {\n    const { authenticators } = this.values;\n    const { options } = this.remediationValue;\n    // Let users select authenticator if no input is provided\n    if (!authenticators || !authenticators.length) {\n      return false;\n    }\n    // Proceed with provided authenticators\n    const matchedOption = findMatchedOption(authenticators, options);\n    if (matchedOption) {\n      return true;\n    }\n    // Terminate idx interaction if provided authenticators are not supported\n    throw new AuthSdkError('Provided authenticators are not supported, please check your org configuration');\n  }\n\n  getNextStep() {\n    const authenticators = this.remediationValue.options.map(option => {\n      const { \n        label, \n        relatesTo: { type } \n      } = option;\n      return { label, value: type };\n    });\n    return {\n      name: this.remediation.name,\n      authenticators,\n    };\n  }\n\n  mapAuthenticator(remediationValue: IdxRemeditionValue) {\n    const { authenticators } = this.values;\n    const { options } = remediationValue;\n    const selectedOption = findMatchedOption(authenticators, options);\n    return {\n      id: selectedOption?.value.form.value.find(({ name }) => name === 'id').value\n    };\n  }\n}\n"],"file":"SelectAuthenticator.js"}