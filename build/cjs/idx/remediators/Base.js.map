{"version":3,"sources":["../../../../lib/idx/remediators/Base.ts"],"names":["Base","constructor","remediation","values","canRemediate","map","required","needed","find","key","hasData","getData","allValues","res","reduce","data","value","name","entry","Array","isArray","length","i","val","alias","getNextStep","getErrorMessages","errorRemediation","createFormError","err","errors","AuthApiError","errorSummary","join","errorCauses"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport { AuthApiError } from '../../errors';\nimport { \n  IdxRemediation, \n  IdxToRemediationValueMap, \n  IdxResponse, \n  NextStep,\n} from '../types';\nimport { getAllValues, getRequiredValues, titleCase } from '../util';\n\nexport interface RemediationValues {\n  stateHandle?: string;\n}\n\nexport class Base {\n  remediation: IdxRemediation;\n  values: RemediationValues;\n  map?: IdxToRemediationValueMap;\n\n  constructor(remediation: IdxRemediation, values: RemediationValues) {\n    this.remediation = remediation;\n    this.values = values;\n  }\n\n  // Override this method to provide custom check\n  canRemediate(): boolean {\n    if (!this.map) {\n      return false;\n    }\n    const required = getRequiredValues(this.remediation);\n    const needed = required.find((key) => !this.hasData(key));\n    if (needed) {\n      return false; // missing data for a required field\n    }\n    return true; // all required fields have available data\n  }\n\n  // returns an object for the entire remediation form, or just a part\n  getData(key?: string) {\n    if (!this.map) {\n      return {};\n    }\n\n    if (!key) {\n      let allValues = getAllValues(this.remediation);\n      let res = allValues.reduce((data, key) => {\n        data[key] = this.getData(key); // recursive\n        return data;\n      }, {});\n      return res;\n    }\n\n    // Map value by \"map${Property}\" function in each subClass\n    if (typeof this[`map${titleCase(key)}`] === 'function') {\n      return this[`map${titleCase(key)}`](\n        this.remediation.value.find(({name}) => name === key)\n      );\n    }\n\n    // Handle general primitive types\n    const entry = this.map[key];\n    if (!entry) {\n      return;\n    }\n\n    if (typeof entry === 'string') {\n      return this.values[entry];\n    }\n\n    if (!Array.isArray(entry) || entry.length === 0) {\n      return this.values[key]; // return value unformatted\n    }\n\n    // find the first aliased property that returns a truthy value\n    for (let i = 0; i < entry.length; i++) {\n      let val = this.values[entry[i]];\n      if (val) {\n        return val;\n      }\n    }\n  }\n\n  hasData(\n    key: string // idx name\n  ): boolean \n  {\n    // no attempt to format, we want simple true/false\n    if (!this.map || !this.map[key] || !Array.isArray(this.map[key])) {\n      return !!this.values[key];\n    }\n    return !!(this.map[key] as string[]).find((alias) => {\n      return this.values[alias]; \n    });\n  }\n\n  getNextStep(): NextStep {\n    return { name: this.remediation.name };\n  }\n\n  // Override this method to extract error message from remediation form fields\n  // eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars\n  getErrorMessages(errorRemediation: IdxResponse): string[] {\n    return [];\n  }\n\n  createFormError(err) {\n    const errorRemediation = err.remediation.value.find(({ name }) => name === this.remediation.name);\n    const errors = this.getErrorMessages(errorRemediation);\n    return new AuthApiError({\n      errorSummary: errors.join('. '),\n      errorCauses: errors\n    });\n  }\n}"],"file":"Base.js"}