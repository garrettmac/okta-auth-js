{"version":3,"sources":["../../../lib/idx/recoverPassword.ts"],"names":["flow","Identify","SelectAuthenticator","EnrollOrChallengeAuthenticator","AuthenticatorVerificationData","recoverPassword","authClient","options","actions"],"mappings":";;;;AAMA;;AACA;;AAWA,MAAMA,IAAqB,GAAG;AAC5B,uBAAqBC,qBADO;AAE5B,uCAAqCC,gCAFT;AAG5B,6BAA2BC,2CAHC;AAI5B,qCAAmCC,0CAJP;AAK5B,yBAAuBD;AALK,CAA9B;;AAgBO,eAAeE,eAAf,CACLC,UADK,EACiBC,OADjB,EAEqB;AAC1B,SAAO,cAAID,UAAJ,EAAgB,EACrB,GAAGC,OADkB;AAErBP,IAAAA,IAFqB;AAGrBQ,IAAAA,OAAO,EAAE,CACP,8BADO,EAEP,wCAFO;AAHY,GAAhB,CAAP;AAQD","sourcesContent":["import { AuthTransaction } from '../tx';\nimport { \n  OktaAuth, \n  IdxOptions, \n  RemediationFlow,\n} from '../types';\nimport { run } from './run';\nimport {\n  Identify,\n  IdentifyValues,\n  SelectAuthenticator,\n  SelectAuthenticatorValues,\n  EnrollOrChallengeAuthenticator,\n  EnrollOrChallengeAuthenticatorValues,\n  AuthenticatorVerificationData,\n  AuthenticatorVerificationDataValues,\n} from './remediators';\n\nconst flow: RemediationFlow = {\n  'identify-recovery': Identify,\n  'select-authenticator-authenticate': SelectAuthenticator,\n  'challenge-authenticator': EnrollOrChallengeAuthenticator,\n  'authenticator-verification-data': AuthenticatorVerificationData,\n  'reset-authenticator': EnrollOrChallengeAuthenticator,\n};\n\nexport interface PasswordRecoveryOptions extends \n  IdxOptions, \n  IdentifyValues,\n  SelectAuthenticatorValues,\n  EnrollOrChallengeAuthenticatorValues,\n  AuthenticatorVerificationDataValues {\n}\n\nexport async function recoverPassword(\n  authClient: OktaAuth, options: PasswordRecoveryOptions\n): Promise<AuthTransaction> {\n  return run(authClient, { \n    ...options, \n    flow,\n    actions: [\n      'currentAuthenticator-recover', \n      'currentAuthenticatorEnrollment-recover'\n    ],\n  });\n}\n"],"file":"recoverPassword.js"}