{"version":3,"sources":["../../../lib/idx/remediate.ts"],"names":["remediate","idxResponse","flow","values","neededToProceed","idxRemediation","AuthSdkError","name","T","remediator","canRemediate","nextStep","getNextStep","data","getData","proceed","rawIdxState","interactionCode","e","messages","formError","createFormError"],"mappings":";;;;AAEA;;AACA;;AAQA;;AAXA;;AACA;AAsBA;AACO,eAAeA,SAAf,CACLC,WADK,EAELC,IAFK,EAGLC,MAHK,EAIyB;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAAsBH,WAA5B;AACA,QAAMI,cAAc,GAAG,6BAAkBH,IAAlB,EAAwBE,eAAxB,CAAvB;;AACA,MAAI,CAACC,cAAL,EAAqB;AACnB,UAAM,IAAIC,oBAAJ,CAAiB,6DAAjB,CAAN;AACD;;AACD,QAAMC,IAAI,GAAGF,cAAc,CAACE,IAA5B;AACA,QAAMC,CAAC,GAAGN,IAAI,CAACK,IAAD,CAAd;;AACA,MAAI,CAACC,CAAL,EAAQ;AACN,UAAM,IAAIF,oBAAJ,CAAiB,6BAAjB,CAAN;AACD;;AAED,QAAMG,UAAU,GAAG,IAAID,CAAJ,CAAMH,cAAN,EAAsBF,MAAtB,CAAnB,CAZ8B,CAc9B;AACA;AACA;AACA;AACA;;AACA,MAAI,CAACM,UAAU,CAACC,YAAX,EAAL,EAAgC;AAC9B,UAAMC,QAAQ,GAAGF,UAAU,CAACG,WAAX,EAAjB;AACA,WAAO;AAAEX,MAAAA,WAAF;AAAeU,MAAAA;AAAf,KAAP;AACD;;AAED,QAAME,IAAI,GAAGJ,UAAU,CAACK,OAAX,EAAb;;AACA,MAAI;AACFb,IAAAA,WAAW,GAAG,MAAMA,WAAW,CAACc,OAAZ,CAAoBV,cAAc,CAACE,IAAnC,EAAyCM,IAAzC,CAApB;;AACA,QAAI,2BAAgBZ,WAAhB,CAAJ,EAAkC;AAChC,YAAM,0BAAeA,WAAW,CAACe,WAA3B,CAAN;AACD;;AACD,QAAIf,WAAW,CAACgB,eAAhB,EAAiC;AAC/B,aAAO;AAAEhB,QAAAA;AAAF,OAAP;AACD;;AACD,WAAOD,SAAS,CAACC,WAAD,EAAcC,IAAd,EAAoBC,MAApB,CAAhB,CARE,CAQ2C;AAC9C,GATD,CASE,OAAOe,CAAP,EAAU;AACV;AACA,QAAI,6BAAiBA,CAAjB,CAAJ,EAAyB;AAAE;AACzB,UAAIA,CAAC,CAACC,QAAN,EAAgB;AACd;AACA,cAAM,0BAAeD,CAAf,CAAN;AACD,OAHD,MAGO;AACL;AACA,cAAMP,QAAQ,GAAGF,UAAU,CAACG,WAAX,EAAjB;AACA,cAAMQ,SAAS,GAAGX,UAAU,CAACY,eAAX,CAA2BH,CAA3B,CAAlB;AACA,eAAO;AAAEP,UAAAA,QAAF;AAAYS,UAAAA;AAAZ,SAAP;AACD;AACF,KAZS,CAaV;;;AACA,UAAMF,CAAN;AACD;AACF","sourcesContent":["/* eslint-disable max-statements */\n/* eslint-disable complexity */\nimport { AuthSdkError } from '../errors';\nimport { \n  IdxResponse, \n  isRawIdxResponse, \n  RemediationFlow, \n  RemediationValues,\n  APIError,\n  NextStep,\n} from '../types';\nimport { \n  createApiError, \n  isErrorResponse, \n  getIdxRemediation \n} from './util';\n\ninterface RemediationResponse {\n  idxResponse?: IdxResponse;\n  nextStep?: NextStep;\n  formError?: APIError;\n}\n\n// This function is called recursively until it reaches success or cannot be remediated\nexport async function remediate(\n  idxResponse: IdxResponse,\n  flow: RemediationFlow,\n  values: RemediationValues\n): Promise<RemediationResponse> {\n  const { neededToProceed } = idxResponse;\n  const idxRemediation = getIdxRemediation(flow, neededToProceed);\n  if (!idxRemediation) {\n    throw new AuthSdkError('No remediation in the idxResponse can be match current flow');\n  }\n  const name = idxRemediation.name;\n  const T = flow[name];\n  if (!T) {\n    throw new AuthSdkError('No remediator is registered');\n  }\n\n  const remediator = new T(idxRemediation, values);\n\n  // Recursive loop breaker\n  // Three states are handled here:\n  // 1. can remediate -> the engine keep running remediation with provided data\n  // 2. cannot remediate due to need user interaction -> return nextStep data back to client\n  // 3. cannot remediate due to unsupported inputs or policies -> throw error\n  if (!remediator.canRemediate()) {\n    const nextStep = remediator.getNextStep();\n    return { idxResponse, nextStep };\n  }\n\n  const data = remediator.getData();\n  try {\n    idxResponse = await idxResponse.proceed(idxRemediation.name, data);\n    if (isErrorResponse(idxResponse)) {\n      throw createApiError(idxResponse.rawIdxState);\n    }\n    if (idxResponse.interactionCode) {\n      return { idxResponse };\n    }\n    return remediate(idxResponse, flow, values); // recursive call\n  } catch (e) {\n    // Thrown error terminates the interaction with idx\n    if (isRawIdxResponse(e)) { // idx responses are sometimes thrown, these will be \"raw\"\n      if (e.messages) {\n        // Error in the root level of the response is not handlable, throw it\n        throw createApiError(e);\n      } else {\n        // Form error is handlable with client side retry, return it\n        const nextStep = remediator.getNextStep();\n        const formError = remediator.createFormError(e);\n        return { nextStep, formError };\n      }\n    }\n    // throw unknown error\n    throw e;\n  }\n}\n"],"file":"remediate.js"}