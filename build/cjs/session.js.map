{"version":3,"sources":["../../lib/session.ts"],"names":["sessionExists","sdk","session","get","then","res","status","catch","getSession","http","withCredentials","refresh","post","href","user","closeSession","httpRequest","url","getIssuerOrigin","method","refreshSession","setCookieAndRedirect","sessionToken","redirectUrl","window","location","assign","checkAccountSetupComplete","token"],"mappings":";;;;;;;;;;AAaA;;AACA;;AAdA;;;;;;;;;;;;;AAYA;AAIA,SAASA,aAAT,CAAuBC,GAAvB,EAA4B;AAC1B,SAAOA,GAAG,CAACC,OAAJ,CAAYC,GAAZ,GACJC,IADI,CACC,UAASC,GAAT,EAAc;AAClB,QAAIA,GAAG,CAACC,MAAJ,KAAe,QAAnB,EAA6B;AAC3B,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD,GANI,EAOJC,KAPI,CAOE,YAAW;AAChB,WAAO,KAAP;AACD,GATI,CAAP;AAUD;;AAED,SAASC,UAAT,CAAoBP,GAApB,EAAyB;AACvB,SAAOQ,cAAKN,GAAL,CAASF,GAAT,EAAc,qBAAd,EAAqC;AAAES,IAAAA,eAAe,EAAE;AAAnB,GAArC,EACNN,IADM,CACD,UAASF,OAAT,EAAkB;AACtB,QAAIG,GAAG,GAAG,gBAAKH,OAAL,EAAc,QAAd,CAAV;;AAEAG,IAAAA,GAAG,CAACM,OAAJ,GAAc,YAAW;AACvB,aAAOF,cAAKG,IAAL,CAAUX,GAAV,EAAe,mBAAQC,OAAR,EAAiB,SAAjB,EAA4BW,IAA3C,EAAiD,EAAjD,EAAqD;AAAEH,QAAAA,eAAe,EAAE;AAAnB,OAArD,CAAP;AACD,KAFD;;AAIAL,IAAAA,GAAG,CAACS,IAAJ,GAAW,YAAW;AACpB,aAAOL,cAAKN,GAAL,CAASF,GAAT,EAAc,mBAAQC,OAAR,EAAiB,MAAjB,EAAyBW,IAAvC,EAA6C;AAAEH,QAAAA,eAAe,EAAE;AAAnB,OAA7C,CAAP;AACD,KAFD;;AAIA,WAAOL,GAAP;AACD,GAbM,EAcNE,KAdM,CAcA,YAAW;AAChB;AACA,WAAO;AAACD,MAAAA,MAAM,EAAE;AAAT,KAAP;AACD,GAjBM,CAAP;AAkBD;;AAED,SAASS,YAAT,CAAsBd,GAAtB,EAA2B;AACzB,SAAOQ,cAAKO,WAAL,CAAiBf,GAAjB,EAAsB;AAC3BgB,IAAAA,GAAG,EAAEhB,GAAG,CAACiB,eAAJ,KAAwB,qBADF;AAE3BC,IAAAA,MAAM,EAAE,QAFmB;AAG3BT,IAAAA,eAAe,EAAE;AAHU,GAAtB,CAAP;AAKD;;AAED,SAASU,cAAT,CAAwBnB,GAAxB,EAA6B;AAC3B,SAAOQ,cAAKG,IAAL,CAAUX,GAAV,EAAe,uCAAf,EAAwD,EAAxD,EAA4D;AAAES,IAAAA,eAAe,EAAE;AAAnB,GAA5D,CAAP;AACD;;AAED,SAASW,oBAAT,CAA8BpB,GAA9B,EAAmCqB,YAAnC,EAAiDC,WAAjD,EAA8D;AAC5DA,EAAAA,WAAW,GAAGA,WAAW,IAAIC,MAAM,CAACC,QAAP,CAAgBZ,IAA7C;AACAW,EAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuBzB,GAAG,CAACiB,eAAJ,KAAwB,8BAAxB,GACrB,yBAAc;AACZS,IAAAA,yBAAyB,EAAE,IADf;AAEZC,IAAAA,KAAK,EAAEN,YAFK;AAGZC,IAAAA,WAAW,EAAEA;AAHD,GAAd,CADF;AAMD","sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n/* global window */\nimport { omit, getLink, toQueryString } from './util';\nimport http from './http';\n\nfunction sessionExists(sdk) {\n  return sdk.session.get()\n    .then(function(res) {\n      if (res.status === 'ACTIVE') {\n        return true;\n      }\n      return false;\n    })\n    .catch(function() {\n      return false;\n    });\n}\n\nfunction getSession(sdk) { \n  return http.get(sdk, '/api/v1/sessions/me', { withCredentials: true })\n  .then(function(session) {\n    var res = omit(session, '_links');\n\n    res.refresh = function() {\n      return http.post(sdk, getLink(session, 'refresh').href, {}, { withCredentials: true });\n    };\n\n    res.user = function() {\n      return http.get(sdk, getLink(session, 'user').href, { withCredentials: true });\n    };\n\n    return res;\n  })\n  .catch(function() {\n    // Return INACTIVE status on failure\n    return {status: 'INACTIVE'};\n  });\n}\n\nfunction closeSession(sdk) {\n  return http.httpRequest(sdk, {\n    url: sdk.getIssuerOrigin() + '/api/v1/sessions/me',\n    method: 'DELETE',\n    withCredentials: true\n  });\n}\n\nfunction refreshSession(sdk) {\n  return http.post(sdk, '/api/v1/sessions/me/lifecycle/refresh', {}, { withCredentials: true });\n}\n\nfunction setCookieAndRedirect(sdk, sessionToken, redirectUrl) {\n  redirectUrl = redirectUrl || window.location.href;\n  window.location.assign(sdk.getIssuerOrigin() + '/login/sessionCookieRedirect' +\n    toQueryString({\n      checkAccountSetupComplete: true,\n      token: sessionToken,\n      redirectUrl: redirectUrl\n    }));\n}\n\nexport {\n  sessionExists,\n  getSession,\n  closeSession,\n  refreshSession,\n  setCookieAndRedirect\n};\n"],"file":"session.js"}